############################load img############################################
# load the val annotations file

"""
modified from source code:
https://github.com/miquelmarti/tiny-imagenet-classifier/blob/master/load_images.py
https://github.com/miquelmarti/tiny-imagenet-classifier/blob/master/val_load.py

"""

import os



def get_annotations_map():
    valAnnotationsPath = './tiny-imagenet-200/val/val_annotations.txt'
    valAnnotationsFile = open(valAnnotationsPath, 'r')
    valAnnotationsContents = valAnnotationsFile.read()
    valAnnotations = {}

    for line in valAnnotationsContents.splitlines():
        pieces = line.strip().split()
        valAnnotations[pieces[0]] = pieces[1]
    
    return valAnnotations


#Sys
import numpy as np
from PIL import Image


def load_images(path,num_classes):
    #Load images
    
    print('Loading ' + str(num_classes) + ' classes')

    X_train0=np.zeros([num_classes*500,3,64,64],dtype='uint8')
    X_train=np.zeros([num_classes*500,64,64,3],dtype='uint8')
    y_train=np.zeros([num_classes*500], dtype='uint8')

    trainPath=path+'/train'

    print('loading training images...');

    i=0
    j=0
    annotations={}
    for sChild in os.listdir(trainPath):
        sChildPath = os.path.join(os.path.join(trainPath,sChild),'images')
        annotations[sChild]=j
        for c in os.listdir(sChildPath):
            X=np.array(Image.open(os.path.join(sChildPath,c)))
            if len(np.shape(X))==2:
                X_train0[i]=np.array([X,X,X])
            else:
                X_train0[i]=np.transpose(X,(2,0,1))
            X_train[i]=np.transpose(X_train0[i],(1,2,0))
            y_train[i]=j
            i+=1
        j+=1
        if (j >= num_classes):
            break

    #print('finished loading training images')

    val_annotations_map = get_annotations_map()

    X_test0 = np.zeros([num_classes*50,3,64,64],dtype='uint8')
    X_test = np.zeros([num_classes*50,64,64,3],dtype='uint8')
    y_test = np.zeros([num_classes*50], dtype='uint8')


    print('loading test images...')

    i = 0
    testPath=path+'/val/images'
    for sChild in os.listdir(testPath):
        if val_annotations_map[sChild] in annotations.keys():
            sChildPath = os.path.join(testPath, sChild)
            X=np.array(Image.open(sChildPath))
            if len(np.shape(X))==2:
                X_test0[i]=np.array([X,X,X])
            else:
                X_test0[i]=np.transpose(X,(2,0,1))
            X_test[i]=np.transpose( X_test0[i],(1,2,0)) 
            y_test[i]=annotations[val_annotations_map[sChild]]
            i+=1
        else:
            pass


   # print('finished loading test images')+str(i)

    return X_train,y_train,X_test,y_test

#########################################################################################

if __name__ == "__main__":

    
    #Keras
    import keras
    from keras.utils import np_utils

    #from plotter import Plotter
    # from keras.utils.visualize_util import plot
    import h5py


    #--------------------load all 200 classes img in h5----------------------------
    num_classes = 200
    
    path='./tiny-imagenet-200'
    X_train,y_train,X_test,y_test=load_images(path,num_classes)
    
    Y_train = np_utils.to_categorical(y_train, num_classes)
    Y_test = np_utils.to_categorical(y_test, num_classes)
    
    #create h5
    h5f = h5py.File('IT.10.ad-200.vggs2.result.h5', 'w')
    h5f.create_dataset('xTrain', data=X_train)
    h5f.create_dataset('yTrain', data=Y_train)
    h5f.create_dataset('xTest', data=X_test)
    h5f.create_dataset('yTest', data=Y_test)
    
    h5f.close()
    
    print ('done')